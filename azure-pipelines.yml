trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: "ubuntu-latest"

variables:
  pythonVersion: "3.11"
  nodeVersion: "20.x"
  CI: "true"
  DISABLE_ESLINT_PLUGIN: "true" 
  SKIP_PREFLIGHT_CHECK: "true" # Skip preflight checks

stages:
  - stage: Build
    displayName: "Build • Test • Report"
    jobs:
      - job: BuildAndTest
        displayName: "Build And Test Application"
        steps:
           Frontend Build - COMMENTED OUT
           - task: NodeTool@0
             displayName: "Install Node.js"
             inputs:
               versionSpec: "$(nodeVersion)"

           - script: |
               cd frontend
               npm install --legacy-peer-deps
               npm install react-scripts --save-dev
               npm run build
             displayName: "Build Frontend"
             timeoutInMinutes: 10
             env:
               CI: "false"                           # Prevent treating warnings as errors
               NODE_ENV: "test"

          # Backend Build and Test
          - task: UsePythonVersion@0
            displayName: "Use Python $(pythonVersion)"
            inputs:
              versionSpec: "$(pythonVersion)"
              addToPath: true

          - script: |
              python -m pip install --upgrade pip
              cd backend
              pip install -r requirements.txt
            displayName: "Install Python and Requirements"

          - script: |
              pytest \
              --cov=backend \
              --cov-report xml:backend/tests/coverage.xml \
              --cov-report html:backend/tests/coverage_html \
              --junitxml=backend/tests/pytest-report.xml \
              --json-report \
              --json-report-file=backend/tests/pytest-report.json \
              -q
            displayName: "Run Backend Tests"

          - bash: |
              total=$(python -c "import json, pathlib, sys; p=pathlib.Path('backend/tests/pytest-report.json'); 
              print(json.loads(p.read_text())['summary']['collected'] if p.exists() else 0)")
              echo \"##vso[task.setvariable variable=UNIT_TEST_COUNT]$total\"
              echo \"TOTAL UNIT TESTS: $total\"
            displayName: "Aggregate Test Count"

          - publish: backend/tests/pytest-report.json
            artifact: test-metrics-json
            displayName: "Publish pytest JSON Report"

          - publish: backend/tests/pytest-report.xml
            artifact: test-metrics-xml
            displayName: "Publish pytest XML report"

          - publish: backend/tests/coverage.xml
            artifact: coverage
            displayName: "Publish Code Coverage XML"

          - task: PublishTestResults@2
            displayName: "Publish Tests to Dashboard"
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: backend/tests/pytest-report.xml
              mergeTestResults: true

          - task: PublishCodeCoverageResults@2
            displayName: "Publish Coverage to Dashboard"
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "backend/tests/coverage.xml"
              reportDirectory: "backend/tests/coverage_html"
