{"created": 1747564661.4955509, "duration": 14.319919109344482, "exitcode": 0, "root": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend", "environment": {}, "summary": {"passed": 27, "total": 27, "collected": 27}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/test_main.py::TestClient", "outcome": "passed", "result": []}, {"nodeid": "tests/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/test_main.py::TestClient", "type": "Class"}, {"nodeid": "tests/test_main.py::test_login_success", "type": "Function", "lineno": 8}, {"nodeid": "tests/test_main.py::test_login_fail", "type": "Function", "lineno": 23}, {"nodeid": "tests/test_main.py::test_create_access_token", "type": "Function", "lineno": 36}, {"nodeid": "tests/test_main.py::test_verify_token_professor", "type": "Function", "lineno": 46}, {"nodeid": "tests/test_main.py::test_home", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_main.py::test_list_databases", "type": "Function", "lineno": 66}, {"nodeid": "tests/test_main.py::test_list_tables", "type": "Function", "lineno": 73}, {"nodeid": "tests/test_main.py::test_list_users", "type": "Function", "lineno": 79}, {"nodeid": "tests/test_main.py::test_get_requests_specific", "type": "Function", "lineno": 93}, {"nodeid": "tests/test_main.py::test_get_users", "type": "Function", "lineno": 101}, {"nodeid": "tests/test_main.py::test_create_user", "type": "Function", "lineno": 109}, {"nodeid": "tests/test_main.py::test_set_role", "type": "Function", "lineno": 117}, {"nodeid": "tests/test_main.py::test_get_user_student", "type": "Function", "lineno": 127}, {"nodeid": "tests/test_main.py::test_get_user_professor", "type": "Function", "lineno": 135}, {"nodeid": "tests/test_main.py::test_get_courses", "type": "Function", "lineno": 142}, {"nodeid": "tests/test_main.py::test_get_student_courses", "type": "Function", "lineno": 153}, {"nodeid": "tests/test_main.py::test_get_student_courses_invalid_email", "type": "Function", "lineno": 189}, {"nodeid": "tests/test_main.py::test_get_student_courses_empty_email", "type": "Function", "lineno": 198}, {"nodeid": "tests/test_main.py::test_upload_file_success", "type": "Function", "lineno": 228}, {"nodeid": "tests/test_main.py::test_reload_files", "type": "Function", "lineno": 315}, {"nodeid": "tests/test_main.py::test_create_general_request", "type": "Function", "lineno": 356}, {"nodeid": "tests/test_main.py::test_create_grade_appeal_request", "type": "Function", "lineno": 376}, {"nodeid": "tests/test_main.py::test_create_schedule_change_request", "type": "Function", "lineno": 400}, {"nodeid": "tests/test_main.py::test_create_request_missing_title", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_main.py::test_create_request_missing_student_email", "type": "Function", "lineno": 441}, {"nodeid": "tests/test_main.py::test_create_request_invalid_grade_appeal", "type": "Function", "lineno": 458}, {"nodeid": "tests/test_main.py::test_create_request_invalid_schedule_change", "type": "Function", "lineno": 478}]}, {"nodeid": "tests/test_main_utils.py::TestClient", "outcome": "passed", "result": []}, {"nodeid": "tests/test_main_utils.py", "outcome": "passed", "result": [{"nodeid": "tests/test_main_utils.py::TestClient", "type": "Class"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_main.py", "type": "Module"}, {"nodeid": "tests/test_main_utils.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/test_main.py::test_login_success", "lineno": 8, "outcome": "passed", "keywords": ["test_login_success", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.002740000025369227, "outcome": "passed"}, "call": {"duration": 0.6634155960055068, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\ngenerated token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsInJvbGUiOiJUZXN0IiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJVc2VyIiwiZXhwIjoxNzQ3NTU3NDUyfQ.P9K7SDAVAGKZrHjuKbgphZApBM6mDTl1kEFoxJeiGvA\n"}, "teardown": {"duration": 0.0005910629988647997, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_login_fail", "lineno": 23, "outcome": "passed", "keywords": ["test_login_fail", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0008780669886618853, "outcome": "passed"}, "call": {"duration": 0.5424489709548652, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\n"}, "teardown": {"duration": 0.0003913029795512557, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_access_token", "lineno": 36, "outcome": "passed", "keywords": ["test_create_access_token", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.00030943797901272774, "outcome": "passed"}, "call": {"duration": 0.0005985259776934981, "outcome": "passed", "stdout": "generated token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsInJvbGUiOiJzdHVkZW50IiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJVc2VyIiwiZXhwIjoxNzQ3NTU3NDUyfQ.uyhOKbyKbRe0e9FMK2ZF234ZpkC7wntT_4PHKTfK4F8\n"}, "teardown": {"duration": 0.0002649499801918864, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_verify_token_professor", "lineno": 46, "outcome": "passed", "keywords": ["test_verify_token_professor", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005500619881786406, "outcome": "passed"}, "call": {"duration": 0.0011172500089742243, "outcome": "passed", "stdout": "generated token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdF9wcm9mZXNzb3JAZXhhbXBsZS5jb20iLCJyb2xlIjoicHJvZmVzc29yIiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJVc2VyIiwiZXhwIjoxNzQ3NTU3NDUyfQ.Qtio5f7cAu4QjTFdB-6as1ZFSYsqXYZkLZtTBhz5A44\nToken from header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdF9wcm9mZXNzb3JAZXhhbXBsZS5jb20iLCJyb2xlIjoicHJvZmVzc29yIiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJVc2VyIiwiZXhwIjoxNzQ3NTU3NDUyfQ.Qtio5f7cAu4QjTFdB-6as1ZFSYsqXYZkLZtTBhz5A44\nafter decode {'user_email': 'test_professor@example.com', 'role': 'professor', 'first_name': 'Test', 'last_name': 'User', 'exp': 1747557452}\nAuthorized as professor!!!!!!!!\n"}, "teardown": {"duration": 0.0004431040142662823, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_home", "lineno": 60, "outcome": "passed", "keywords": ["test_home", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.00034278997918590903, "outcome": "passed"}, "call": {"duration": 0.004423277045134455, "outcome": "passed"}, "teardown": {"duration": 0.0002486620214767754, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_list_databases", "lineno": 66, "outcome": "passed", "keywords": ["test_list_databases", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.00031476799631491303, "outcome": "passed"}, "call": {"duration": 0.004208401020150632, "outcome": "passed"}, "teardown": {"duration": 0.00026674801483750343, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_list_tables", "lineno": 73, "outcome": "passed", "keywords": ["test_list_tables", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0002968069748021662, "outcome": "passed"}, "call": {"duration": 0.003891955013386905, "outcome": "passed"}, "teardown": {"duration": 0.0002655930002219975, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_list_users", "lineno": 79, "outcome": "passed", "keywords": ["test_list_users", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0003051109961234033, "outcome": "passed"}, "call": {"duration": 3.9174036500044167, "outcome": "passed", "stdout": "2025-05-18 13:37:35,975 INFO sqlalchemy.engine.Engine SELECT DATABASE()\n2025-05-18 13:37:35,975 INFO sqlalchemy.engine.Engine [raw sql] ()\n2025-05-18 13:37:36,152 INFO sqlalchemy.engine.Engine SELECT @@sql_mode\n2025-05-18 13:37:36,152 INFO sqlalchemy.engine.Engine [raw sql] ()\n2025-05-18 13:37:36,240 INFO sqlalchemy.engine.Engine SELECT @@lower_case_table_names\n2025-05-18 13:37:36,240 INFO sqlalchemy.engine.Engine [raw sql] ()\n2025-05-18 13:37:36,415 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2025-05-18 13:37:36,417 INFO sqlalchemy.engine.Engine SELECT users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.`role` \nFROM users\n2025-05-18 13:37:36,417 INFO sqlalchemy.engine.Engine [generated in 0.00045s] ()\n2025-05-18 13:37:36,515 INFO sqlalchemy.engine.Engine ROLLBACK\n", "log": [{"name": "sqlalchemy.engine.Engine", "msg": "SELECT DATABASE()", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564655.975153, "msecs": 975.0, "relativeCreated": 9169.824123382568, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:35,975"}, {"name": "sqlalchemy.engine.Engine", "msg": "[raw sql] ()", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564655.975714, "msecs": 975.0, "relativeCreated": 9170.385122299194, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:35,975"}, {"name": "sqlalchemy.engine.Engine", "msg": "SELECT @@sql_mode", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.152014, "msecs": 152.0, "relativeCreated": 9346.68517112732, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,152"}, {"name": "sqlalchemy.engine.Engine", "msg": "[raw sql] ()", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.152267, "msecs": 152.0, "relativeCreated": 9346.938133239746, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,152"}, {"name": "sqlalchemy.engine.Engine", "msg": "SELECT @@lower_case_table_names", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.240244, "msecs": 240.0, "relativeCreated": 9434.91506576538, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,240"}, {"name": "sqlalchemy.engine.Engine", "msg": "[raw sql] ()", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.240509, "msecs": 240.0, "relativeCreated": 9435.180187225342, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,240"}, {"name": "sqlalchemy.engine.Engine", "msg": "BEGIN (implicit)", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 2699, "funcName": "_connection_begin_impl", "created": 1747564656.4150012, "msecs": 415.0, "relativeCreated": 9609.67230796814, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,415"}, {"name": "sqlalchemy.engine.Engine", "msg": "SELECT users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.`role` \nFROM users", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.417365, "msecs": 417.0, "relativeCreated": 9612.036228179932, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,417"}, {"name": "sqlalchemy.engine.Engine", "msg": "[generated in 0.00045s] ()", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1843, "funcName": "_execute_context", "created": 1747564656.417579, "msecs": 417.0, "relativeCreated": 9612.250089645386, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "anyio.from_thread.BlockingPortal._call_func", "asctime": "2025-05-18 13:37:36,417"}, {"name": "sqlalchemy.engine.Engine", "msg": "ROLLBACK", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 2702, "funcName": "_connection_rollback_impl", "created": 1747564656.515711, "msecs": 515.0, "relativeCreated": 9710.382223129272, "thread": 123145479585792, "threadName": "Thread-6 (run_blocking_portal)", "processName": "MainProcess", "process": 92945, "taskName": "Task-34", "asctime": "2025-05-18 13:37:36,515"}]}, "teardown": {"duration": 0.00034089997643604875, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_requests_specific", "lineno": 93, "outcome": "passed", "keywords": ["test_get_requests_specific", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0006888420321047306, "outcome": "passed"}, "call": {"duration": 0.5536542699555866, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\nFakeAsyncSession.execute: select requests.id, requests.title, requests.student_email, requests.details, requests.course_id, requests.course_component, requests.files, requests.status, requests.created_date, requests.timeline \nfrom requests \nwhere requests.student_email = :student_email_1\n"}, "teardown": {"duration": 0.00036821997491642833, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_users", "lineno": 101, "outcome": "passed", "keywords": ["test_get_users", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0006372879724949598, "outcome": "passed"}, "call": {"duration": 0.2774773429846391, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users\n"}, "teardown": {"duration": 0.00044214900117367506, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_user", "lineno": 109, "outcome": "passed", "keywords": ["test_create_user", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005605329643003643, "outcome": "passed"}, "call": {"duration": 0.5418961480027065, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\n"}, "teardown": {"duration": 0.0003566889790818095, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_set_role", "lineno": 117, "outcome": "passed", "keywords": ["test_set_role", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005557250115089118, "outcome": "passed"}, "call": {"duration": 0.27475218899780884, "outcome": "passed", "stdout": "in the set role function\nFakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\n"}, "teardown": {"duration": 0.0003512839903123677, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_user_student", "lineno": 127, "outcome": "passed", "keywords": ["test_get_user_student", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005494999932125211, "outcome": "passed"}, "call": {"duration": 0.5433759809820913, "outcome": "passed", "stdout": "in the func test_student@example.com\nFakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\nFakeAsyncSession.execute: select students.email, students.department_id \nfrom students \nwhere students.email = :email_1\n"}, "teardown": {"duration": 0.00034792203223332763, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_user_professor", "lineno": 135, "outcome": "passed", "keywords": ["test_get_user_professor", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005512739880941808, "outcome": "passed"}, "call": {"duration": 0.5485850099939853, "outcome": "passed", "stdout": "in the func test_professor@example.com\nFakeAsyncSession.execute: select users.email, users.id, users.first_name, users.last_name, users.hashed_password, users.role \nfrom users \nwhere users.email = :email_1\nFakeAsyncSession.execute: select professors.email, professors.department_id \nfrom professors \nwhere professors.email = :email_1\n"}, "teardown": {"duration": 0.0005362029769457877, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_courses", "lineno": 142, "outcome": "passed", "keywords": ["test_get_courses", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005959680420346558, "outcome": "passed"}, "call": {"duration": 0.5459682469954714, "outcome": "passed", "stdout": "generated token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdF9wcm9mZXNzb3JAZXhhbXBsZS5jb20iLCJyb2xlIjoicHJvZmVzc29yIiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJQcm9mZXNzb3IiLCJleHAiOjE3NDc1NTc0NTl9.6Fx1uEfpifNuMZaDxODzvh-gFmDjyPkziu_9H2fo9Oc\nToken from header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2VtYWlsIjoidGVzdF9wcm9mZXNzb3JAZXhhbXBsZS5jb20iLCJyb2xlIjoicHJvZmVzc29yIiwiZmlyc3RfbmFtZSI6IlRlc3QiLCJsYXN0X25hbWUiOiJQcm9mZXNzb3IiLCJleHAiOjE3NDc1NTc0NTl9.6Fx1uEfpifNuMZaDxODzvh-gFmDjyPkziu_9H2fo9Oc\nafter decode {'user_email': 'test_professor@example.com', 'role': 'professor', 'first_name': 'Test', 'last_name': 'Professor', 'exp': 1747557459}\nAuthorized as professor!!!!!!!!\nFakeAsyncSession.execute: select professors.email, professors.department_id \nfrom professors \nwhere professors.email = :email_1\nFakeAsyncSession.execute: select courses.id, courses.name, courses.description, courses.credits, courses.professor_email, courses.department_id \nfrom courses \nwhere courses.professor_email = :professor_email_1\n"}, "teardown": {"duration": 0.0003843870363198221, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_student_courses", "lineno": 153, "outcome": "passed", "keywords": ["test_get_student_courses", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.000555441016331315, "outcome": "passed"}, "call": {"duration": 0.27879672701237723, "outcome": "passed", "stdout": "FakeAsyncSession.execute: select student_courses.student_email, student_courses.course_id, student_courses.professor_email, courses.id, courses.name, courses.description, courses.credits, courses.professor_email as professor_email_1, courses.department_id, grades.student_email as student_email_1, grades.course_id as course_id_1, grades.professor_email as professor_email_2, grades.grade_component, grades.grade \nfrom student_courses join courses on student_courses.course_id = courses.id left outer join grades on grades.course_id = courses.id and grades.student_email = :student_email_2 \nwhere student_courses.student_email = :student_email_3\n[{'id': 1, 'name': 'Course 1', 'description': 'Description 1', 'credits': 1, 'professor_email': 'test_professor@example.com', 'department_id': 1, 'grades': [{'grade_component': 'Exam 1', 'grade': 91}]}, {'id': 2, 'name': 'Course 2', 'description': 'Description 2', 'credits': 2, 'professor_email': 'test_professor@example.com', 'department_id': 2, 'grades': [{'grade_component': 'Exam 2', 'grade': 92}]}, {'id': 3, 'name': 'Course 3', 'description': 'Description 3', 'credits': 3, 'professor_email': 'test_professor@example.com', 'department_id': 3, 'grades': []}]\n"}, "teardown": {"duration": 0.0003580430056899786, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_student_courses_invalid_email", "lineno": 189, "outcome": "passed", "keywords": ["test_get_student_courses_invalid_email", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005524909938685596, "outcome": "passed"}, "call": {"duration": 0.004786649020388722, "outcome": "passed"}, "teardown": {"duration": 0.0003752380143851042, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_get_student_courses_empty_email", "lineno": 198, "outcome": "passed", "keywords": ["test_get_student_courses_empty_email", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0006790279876440763, "outcome": "passed"}, "call": {"duration": 0.00401281303493306, "outcome": "passed"}, "teardown": {"duration": 0.00032328005181625485, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_upload_file_success", "lineno": 228, "outcome": "passed", "keywords": ["test_upload_file_success", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.002774721011519432, "outcome": "passed"}, "call": {"duration": 0.013906274980399758, "outcome": "passed"}, "teardown": {"duration": 0.0003489769878797233, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_reload_files", "lineno": 315, "outcome": "passed", "keywords": ["test_reload_files", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0012159519828855991, "outcome": "passed"}, "call": {"duration": 0.004664552980102599, "outcome": "passed", "stdout": "filename: dummy.txt\nroot: /private/var/folders/qs/bkrrd9sx3m9chb8gzzz600p00000gn/T/pytest-of-udivak/pytest-19/test_reload_files0/Documents/test@example.com\nfile_path: dummy.txt\n{'files': ['dummy.txt'], 'file_paths': ['dummy.txt']}\n"}, "teardown": {"duration": 0.00035517197102308273, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_general_request", "lineno": 356, "outcome": "passed", "keywords": ["test_create_general_request", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0006102579645812511, "outcome": "passed"}, "call": {"duration": 0.2758369230432436, "outcome": "passed", "stdout": "in submit request\n{'title': 'Test Request', 'student_email': 'test_student@example.com', 'details': 'Test details', 'files': {}, 'grade_appeal': None, 'schedule_change': None}\nFakeAsyncSession.execute: select request_routing_rules.type, request_routing_rules.destination \nfrom request_routing_rules \nwhere request_routing_rules.type = :type_1\n"}, "teardown": {"duration": 0.0003571289707906544, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_grade_appeal_request", "lineno": 376, "outcome": "passed", "keywords": ["test_create_grade_appeal_request", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005591019871644676, "outcome": "passed"}, "call": {"duration": 0.2735933359945193, "outcome": "passed", "stdout": "in submit request\n{'title': 'Grade Appeal Request', 'student_email': 'test_student@example.com', 'details': 'Test grade appeal details', 'files': {}, 'grade_appeal': {'course_id': '1', 'grade_component': 'Final Exam', 'current_grade': 85}, 'schedule_change': None}\nFakeAsyncSession.execute: select request_routing_rules.type, request_routing_rules.destination \nfrom request_routing_rules \nwhere request_routing_rules.type = :type_1\n"}, "teardown": {"duration": 0.0003531519905664027, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_schedule_change_request", "lineno": 400, "outcome": "passed", "keywords": ["test_create_schedule_change_request", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005462709814310074, "outcome": "passed"}, "call": {"duration": 0.2730008490034379, "outcome": "passed", "stdout": "in submit request\n{'title': 'Schedule Change Request', 'student_email': 'test_student@example.com', 'details': 'Test schedule change details', 'files': {}, 'grade_appeal': None, 'schedule_change': {'course_id': '1', 'professors': ['test_professor@example.com']}}\nFakeAsyncSession.execute: select request_routing_rules.type, request_routing_rules.destination \nfrom request_routing_rules \nwhere request_routing_rules.type = :type_1\n"}, "teardown": {"duration": 0.0004042049986310303, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_request_missing_title", "lineno": 424, "outcome": "passed", "keywords": ["test_create_request_missing_title", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005484060384333134, "outcome": "passed"}, "call": {"duration": 0.004127738007809967, "outcome": "passed", "stdout": "in submit request\n{'student_email': 'test_student@example.com', 'details': 'Test details', 'files': {}, 'grade_appeal': None, 'schedule_change': None}\n"}, "teardown": {"duration": 0.0003317339578643441, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_request_missing_student_email", "lineno": 441, "outcome": "passed", "keywords": ["test_create_request_missing_student_email", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.000552368990611285, "outcome": "passed"}, "call": {"duration": 0.005430381977930665, "outcome": "passed", "stdout": "in submit request\n{'title': 'Test Request', 'details': 'Test details', 'files': {}, 'grade_appeal': None, 'schedule_change': None}\n"}, "teardown": {"duration": 0.00036100298166275024, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_request_invalid_grade_appeal", "lineno": 458, "outcome": "passed", "keywords": ["test_create_request_invalid_grade_appeal", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.0005544669693335891, "outcome": "passed"}, "call": {"duration": 0.004941624996718019, "outcome": "passed", "stdout": "in submit request\n{'title': 'Grade Appeal Request', 'student_email': 'test_student@example.com', 'details': 'Test details', 'files': {}, 'grade_appeal': {'course_id': '1'}, 'schedule_change': None}\n"}, "teardown": {"duration": 0.0005310919950716197, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_create_request_invalid_schedule_change", "lineno": 478, "outcome": "passed", "keywords": ["test_create_request_invalid_schedule_change", "test_main.py", "tests", "backend", ""], "setup": {"duration": 0.000554427970200777, "outcome": "passed"}, "call": {"duration": 0.004452699038665742, "outcome": "passed", "stdout": "in submit request\n{'title': 'Schedule Change Request', 'student_email': 'test_student@example.com', 'details': 'Test details', 'files': {}, 'grade_appeal': None, 'schedule_change': {'course_id': '1'}}\n"}, "teardown": {"duration": 0.0005875820061191916, "outcome": "passed"}}], "warnings": [{"message": "relationship 'Students.student_courses' will copy column students.email to column student_courses.student_email, which conflicts with relationship(s): 'Students.courses' (copies students.email to student_courses.student_email). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"courses\"' to the 'Students.student_courses' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "relationship 'StudentCourses.student' will copy column students.email to column student_courses.student_email, which conflicts with relationship(s): 'Students.courses' (copies students.email to student_courses.student_email). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"courses\"' to the 'StudentCourses.student' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "relationship 'StudentCourses.course' will copy column courses.id to column student_courses.course_id, which conflicts with relationship(s): 'Students.courses' (copies courses.id to student_courses.course_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"courses\"' to the 'StudentCourses.course' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "relationship 'Courses.students' will copy column courses.id to column student_courses.course_id, which conflicts with relationship(s): 'StudentCourses.course' (copies courses.id to student_courses.course_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"course\"' to the 'Courses.students' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "relationship 'Courses.students' will copy column students.email to column student_courses.student_email, which conflicts with relationship(s): 'StudentCourses.student' (copies students.email to student_courses.student_email), 'Students.student_courses' (copies students.email to student_courses.student_email). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"student,student_courses\"' to the 'Courses.students' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "relationship 'Courses.student_courses' will copy column courses.id to column student_courses.course_id, which conflicts with relationship(s): 'Courses.students' (copies courses.id to student_courses.course_id), 'Students.courses' (copies courses.id to student_courses.course_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps=\"courses,students\"' to the 'Courses.student_courses' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)", "category": "SAWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/tests/test_main_utils.py", "lineno": 106}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/main.py", "lineno": 70}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/main.py", "lineno": 70}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/main.py", "lineno": 70}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/udivak/Desktop/Software Engineering/BS-PM-2025-TEAM14/backend/main.py", "lineno": 70}]}